import { beforeAll, describe, expect, test } from "vitest";
import { toolsService } from "src/persistence/dynamoDB/api/tools/index";
import path from "path";
import { config } from "dotenv";
import produce from "immer";
import { deleteManyById, deleteManyByTag } from "src/persistence/dynamoDB/api/tools/deleteMany";

const setupTestEnvs = () => {
  // create a .env.test file with necessary envs for this test
  config({ path: path.resolve(__dirname, ".env.test") });
};

const baseTool = {
  createdBy: "test-user",
  title: "test-title",
  link: "test-link",
  description: "test-description",
  tags: ["test"],
};

const produceWithDifferentTag = (...tags: string[]) =>
  produce(baseTool, (draft) => {
    draft.tags.push(...tags);
    return draft;
  });

describe("ToolService", () => {
  setupTestEnvs();
  test("create", async () => {
    // add some tags to the baseTool
    const tool = produce(baseTool, (draft) => {
      draft.tags.push("test-tag");
      return draft;
    });
    const result = await toolsService.create(tool);

    // id is generated by nanoid, so we can't compare it
    // result.unprocessed.map(c => c.toolId) = "ANY_ID";

    expect(result).toMatchInlineSnapshot("{}");
  });

  beforeAll(async () => {
    await deleteManyByTag({ tag: "test" });
  });


  test("can delete tags", async () => {
    // create 3 tags
    // - 1 without tag
    // - 2 with same tag
    // delete the ones with tag by tag
    // verify that the one without tag is still there
    // delete the one without tag by id

    const allTools = [
      produceWithDifferentTag(),
      produceWithDifferentTag("to-delete"),
      produceWithDifferentTag("to-delete"),
    ].map((tool) => ({ ...tool, id: "ANY_ID" }));

    const [toolWithoutTag, ...toolsWithSameTag] = await Promise.all(
      allTools.map(async (tool) => {
        await toolsService.create(tool);
      })
    );

    await deleteManyByTag({ tag: "to-delete" });
    // todo: verify that the one without tag is still there

    // todo: delete the one without tag by id
    // await deleteManyById({ ids: [toolWithoutTag.id] });
  });

  describe("findMany", () => {

    const allTools = [
      produceWithDifferentTag("test-tag"),
      produceWithDifferentTag("test-tag", "test-tag-2"),
      produceWithDifferentTag("test-tag", "test-tag-3"),
    ].map((tool) => ({ ...tool, id: "ANY_ID" }));

    beforeAll(async () => {
      await Promise.all(
        allTools.map(async (tool) => {
          await toolsService.create(tool);
        })
      );
    });

    test("Without tag", async () => {
      const result = await toolsService.findMany();
      expect(result.length).toBe(3);
    });

    test("With tag", async () => {
      const result = await toolsService.findMany({ tag: "test-tag" });
      // expect every tool to contain test-tag
      expect(result.every((tool) => tool.tags?.includes("test-tag"))).toBe(true)

      const result2 = await toolsService.findMany({ tag: "test-tag-2" });
      // expect every tool to contain test-tag-2
      expect(result2.every((tool) => tool.tags?.includes("test-tag-2"))).toBe(true)
    });
  });
});
